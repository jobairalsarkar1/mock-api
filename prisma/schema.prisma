datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  role          Role            @default(CLIENT)
  apiKey        String?         @unique
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  apiUsages     ApiUsage[]
}

enum Role {
  ADMIN
  HELPER
  CLIENT
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


// Dummy Models for frontend dev
model DummyUser {
  id        String   @id @default(cuid())
  name      String
  username  String
  email     String   @unique
  avatar    String?
  role      String   @default("user")
  bio       String?
  website   String?
  location  String?
  twitter   String?
  github    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// API usage tracker per real User
model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DummyProduct {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int       @default(0)
  sku         String?   @unique
  category    String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DummyOrder {
  id             String            @id @default(cuid())
  customerName   String
  customerEmail  String
  totalAmount    Float
  status         OrderStatus       @default(PENDING)
  shippingAddress String?
  paymentMethod  String?

  items          DummyOrderItem[]

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model DummyOrderItem {
  id        String      @id @default(cuid())
  orderId   String
  name      String
  price     Float
  quantity  Int

  order     DummyOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model DummyCart {
  id        String      @id @default(cuid())
  customerName  String
  customerEmail String
  totalAmount   Float
  status        String    @default("pending")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  items         CartItem[]

}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  name      String
  price     Float
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  cart DummyCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model DummyPayment {
  id             String      @id @default(cuid())
  customerName   String
  customerEmail  String
  amount         Float
  status         PaymentStatus  @default(PENDING)
  paymentMethod  PaymentMethod
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  items          PaymentItem[]
}

model PaymentItem {
  id          String   @id @default(cuid())
  paymentId   String
  name        String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payment DummyPayment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
}

model DummyPost {
  id        String      @id @default(cuid())
  title     String
  content   String?
  author    String
  tags      String[]    @default([])
  image     String?
  status    PostStatus  @default(PUBLISHED)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
